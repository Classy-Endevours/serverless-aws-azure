service: serverless-node-aws-azure
frameworkVersion: '2'
useDotenv: true
# providers
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
 
# functions 
functions:
  findRecord:
    handler:
      - api/auth.auth0 
      - api/report.find
    memorySize: 128
    description: get all report
    events:
      - http: 
          path: report
          method: get
  saveRecord:
    handler: 
      - api/report.save
    memorySize: 128
    description: get getAnotherToken from api key
    events:
      - http: 
          path: report
          method: post
  auth0Authorization:
    handler: api/auth.auth0

# plugins
plugins:
  - serverless-offline
  - serverless-middleware
  - serverless-plugin-typescript


# custom object
custom:
  stage: ${opt:stage, self:provider.stage}

# resources
resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

# package
package:
  exclude:
    - node_modules/serverless-offline/**