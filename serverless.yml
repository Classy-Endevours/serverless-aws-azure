service: serverless-node-azure-aws
frameworkVersion: '2'
useDotenv: true
# providers
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-east-1
  environment: 
    JWKS_URI: ${self:custom.environment.JWKS_URI}
    TOKEN_ISSUER: ${self:custom.environment.TOKEN_ISSUER}
    AUDIENCE: ${self:custom.environment.AUDIENCE}
    imageUploadBucket: ${self:custom.environment.aws.S3_BUCKET_NAME}
    region: ${self:provider.region}
    DATABASE_URL: ${self:custom.environment.aws.DATABASE_URL}
    SENDGRID_API_KEY: ${self:custom.environment.SENDGRID_API_KEY}
    SENDER_EMAIL: ${self:custom.environment.SENDER_EMAIL}
    RECEIVER_EMAIL: ${self:custom.environment.RECEIVER_EMAIL}
    # AWS_ACCESS_KEY_ID: ${self:custom.environment.AWS_ACCESS_KEY_ID}
    # AWS_SECRET_ACCESS_KEY: ${self:custom.environment.AWS_SECRET_ACCESS_KEY}
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "s3:*"
    Resource:
      - "arn:aws:s3:::${self:custom.environment.aws.S3_BUCKET_NAME}/*"
# functions 
functions:
  findRecords:
    handler:
      - api/auth.auth0
      - api/report.find
    memorySize: 128
    description: get all reports
    events:
      - http: 
          path: reports
          method: get
  findRecord:
    handler:
      - api/auth.auth0
      - api/report.findOne
    memorySize: 128
    description: get particular report
    events:
      - http: 
          path: reports/{id}
          method: get
  findAttachment:
    handler:
      - api/auth.auth0
      - api/report.findAttachment
    memorySize: 128
    description: get particular report
    events:
      - http: 
          path: reports/{id}/attachment
          method: get
  saveRecord:
    handler: 
      - api/report.save
    memorySize: 256
    timeout: 80
    description: Save Report in the database
    events:
      - http: 
          path: reports
          method: post
  # auth0Authorization:
  #   handler: api/auth.auth0

# plugins
plugins:
  - serverless-offline
  - serverless-middleware
  - serverless-webpack
  # - serverless-plugin-typescript


# custom object
custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules
  defaultStage: dev
  environment: ${file(env.yml):${self:provider.stage}, file(env.yml):dev}
  imageUploadBucket: serverless-node-aws-azur-serverlessdeploymentbuck-qtqy108vlk1h

# resources
resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    # ImageUploadBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.imageUploadBucket}
    #     AccessControl: PublicRead
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

# package
package:
  exclude:    
    - .git/**
    - api/azure/**
    - tests/**
    - node_modules/@azure/**
    - node_modules/@types/**
    - node_modules/typescript/**
    - node_modules/serverless-offline/**
    - node_modules/serverless-azure-functions/**
    - node_modules/@azure/storage-blob/**
