service: serverless-node-aws-azure
frameworkVersion: '2'
useDotenv: true
# providers
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  iamRoleStatements:
    Effect: Allow
    Action:
      - s3:*
    Resource: '*'
  environment: 
    JWKS_URI: https://dev-6v3npaji.us.auth0.com/.well-known/jwks.json
    TOKEN_ISSUER: https://dev-6v3npaji.us.auth0.com/
    AUDIENCE: https://dev-6v3npaji.us.auth0.com/api/v2/
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}

 
# functions 
functions:
  findRecords:
    handler:
      - api/auth.auth0
      - api/report.find
    memorySize: 128
    description: get all reports
    events:
      - http: 
          path: reports
          method: get
  findRecord:
    handler:
      - api/report.find
    memorySize: 128
    description: get particlular report
    events:
      - http: 
          path: reports/{id}
          method: get
  saveRecord:
    handler: 
      - api/report.save
    memorySize: 128
    description: Save Report in the database
    events:
      - http: 
          path: reports
          method: post
  auth0Authorization:
    handler: api/auth.auth0

# plugins
plugins:
  - serverless-offline
  - serverless-middleware
  - serverless-plugin-typescript


# custom object
custom:
  stage: ${opt:stage, self:provider.stage}
  imageUploadBucket: incident-manager

# resources
resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

# package
package:
  exclude:
    - node_modules/serverless-offline/**